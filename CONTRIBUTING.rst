#################################
Contributing to Edunext Eox-Hooks
#################################

Contributions to Edunext Eox-Hooks are very welcome, 
and strongly encouraged! Here's a step-by-step guide 
that should help you get started.

Step 0: Join the Conversation
=============================

Got an idea for how to improve the codebase? Fantastic, we'd love to hear about
it! Before you dive in and spend a lot of time and effort making a pull request,
it's a good idea to discuss your idea with other interested developers and/or the
Edunext product team. You may get some valuable feedback that changes how you think
about your idea, or you may find other developers who have the same idea and want
to work together.

Step 1: Branch, Commit and Pull Request
=======================================

* As a suggestion, create a branch of the form <name_developer/name_feature>
* Make all the changes and improvements it requires
* Make sure to commit according to the standards of `conventional commits`_.
* A PR of the branch containing the changes to 'master' is created.
* The branch must be up to date with respect to 'master'. Use `rebase`_ for this.
* The PR must have an update of the file `CHANGELOG.rst`_. All changes contained in the branch to be merged must be specified as 'unreleased'.
* Once the PR is approved, we perform squash and merge.

.. _conventional commits: https://www.conventionalcommits.org/en/v1.0.0/
.. _rebase: https://www.atlassian.com/es/git/tutorials/rewriting-history/git-rebase
.. _CHANGELOG.rst: https://github.com/eduNEXT/eox-hooks/blob/master/CHANGELOG.rst

Step 2: Make Releases
=====================
1. In development, we position ourselves in the main branch and update it. 
2. `bumpversion`_: Then we write in console::

    bumpversion [major, minor, patch]
3. The changes that are in 'unreleased' become 'released', they are identified with the date and the version that has generated `bumpversion`_.
4. The commit generated by `bumpversion`_ is pushed, which must also include the recent change in `CHANGELOG.rst`_.
5. The tag generated by bumpversion is pushed::

    git push origin <tag_bumpversion_generated>
6. Make github `release`_. 
7. [OPTIONAL] Update the repositories with the new version of the plugin.

.. _bumpversion: https://pypi.org/project/bumpversion/
.. _release: https://docs.github.com/es/github/administering-a-repository/releasing-projects-on-github/managing-releases-in-a-repository
